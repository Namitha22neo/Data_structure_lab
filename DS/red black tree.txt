#include <stdio.h>
#include <stdlib.h>
struct Node {
 int data;
 char color;
 struct Node* parent;
 struct Node* left;
 struct Node* right;
};
typedef struct Node Node;
void insertRBTree(Node** root, int data);
void displayRBTree(Node* root);
void fixViolations(Node** root, Node* newNode);
void rotateLeft(Node** root, Node* x);
void rotateRight(Node** root, Node* x);
int main() {
 Node* root = NULL;
 int choice, data;
do {
 printf("\n1. Insert\n2. Display\n3. Exit\nEnter Your choice: ");
 scanf("%d", &choice);
switch (choice) {
 case 1:
 printf("Enter the element to insert: ");
 scanf("%d", &data);
 insertRBTree(&root, data);
 break;
case 2:

 printf("Red-Black Tree: ");
 displayRBTree(root);
 printf("\n");
 break;
case 3:
 printf("Exiting...\n");
 exit(0);
 break;
default:
 printf("Invalid choice! Please try again.\n");
 }
 } while (1);
return 0;
}
void insertRBTree(Node** root, int data) {
 Node* newNode = (Node*)malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = newNode->right = newNode->parent = NULL;
 newNode->color = 'R';
 Node* parent = NULL;
 Node* current = *root;
while (current != NULL) {
 parent = current;
 if (data < current->data)
 current = current->left;
 else
 current = current->right;
 }
 newNode->parent = parent;
if (parent == NULL)
 *root = newNode; 

 else if (data < parent->data)
 parent->left = newNode;
 else
 parent->right = newNode;
 fixViolations(root, newNode);
}
void displayRBTree(Node* root) {
 if (root != NULL) {
 displayRBTree(root->left);
 printf("(%d, %c) ", root->data, root->color);
 displayRBTree(root->right);
 }
}
void fixViolations(Node** root, Node* newNode) {
 Node* parent = NULL;
 Node* grandparent = NULL;
while (newNode != *root && newNode->color == 'R' && newNode->parent->color == 'R') {
 parent = newNode->parent;
 grandparent = parent->parent;
 if (parent == grandparent->left) {
 Node* uncle = grandparent->right;
 if (uncle != NULL && uncle->color == 'R') {
 parent->color = 'B';
 uncle->color = 'B';
 grandparent->color = 'R';
 newNode = grandparent;
 } else {
 if (newNode == parent->right) {
 rotateLeft(root, parent);
 newNode = parent;
 parent = newNode->parent;

 }
 rotateRight(root, grandparent);
 parent->color = 'B';
 grandparent->color = 'R';
 newNode = parent;
 }
 } else {
Node* uncle = grandparent->left;
 if (uncle != NULL && uncle->color == 'R') {
 parent->color = 'B';
 uncle->color = 'B';
 grandparent->color = 'R';
 newNode = grandparent;
 } else {
 if (newNode == parent->left) {
 rotateRight(root, parent);
 newNode = parent;
 parent = newNode->parent;
 }
rotateLeft(root, grandparent);
 parent->color = 'B';
 grandparent->color = 'R';
 newNode = parent;
 }
 }
 }
 (*root)->color = 'B';
}
void rotateLeft(Node** root, Node* x) {
 Node* y = x->right;
 x->right = y->left;

if (y->left != NULL)
 y->left->parent = x;
y->parent = x->parent;
if (x->parent == NULL)
 *root = y;
 else if (x == x->parent->left)
 x->parent->left = y;
 else
 x->parent->right = y;
 y->left = x;
 x->parent = y;
}
void rotateRight(Node** root, Node* x) {
 Node* y = x->left;
 x->left = y->right;
if (y->right != NULL)
 y->right->parent = x;
y->parent = x->parent;
if (x->parent == NULL)
 *root = y;
 else if (x == x->parent->left)
 x->parent->left = y;
 else
 x->parent->right = y;
y->right = x;
 x->parent = y;
}

OUTPUT 
1. Insert
2. Display
3. Exit
Enter Your choice: 1
Enter the element to insert: 8
1. Insert
2. Display
3. Exit
Enter Your choice: 2
Red-Black Tree: (8, B)
1. Insert
2. Display
3. Exit
Enter Your choice: 1
Enter the element to insert: 5
1. Insert
2. Display
3. Exit
Enter Your choice: 1
Enter the element to insert: 12
1. Insert
2. Display
3. Exit
Enter Your choice: 1
Enter the element to insert: 3
DEPARTMENT OF COMPUTER APPLICATIONS 20MCA135 DATA STRUCTURES LAB
50
1. Insert
2. Display
3. Exit
Enter Your choice: 2
Red-Black Tree: (3, B) (5, R) (8, B) (12, R)
1. Insert
2. Display
3. Exit
Enter Your choice: 3
Exiting..