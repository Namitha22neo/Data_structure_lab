#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Stack {
struct Node* top;
};
void initializeStack(struct Stack* stack) {
stack->top = NULL;
}
void push(struct Stack* stack, int element) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = element;
 newNode->next = stack->top;
 stack->top = newNode;
}
int pop(struct Stack* stack) {
 if (stack->top == NULL) {
 printf("Error: Stack is empty\n");
 return -1; 
 }
int poppedElement = stack->top->data;
 struct Node* temp = stack->top;
 stack->top = stack->top->next;
 free(temp);
return poppedElement;
}
int peek(struct Stack* stack) {
 if (stack->top == NULL) {
 printf("Error: Stack is empty\n");
 return -1; 
 }
return stack->top->data;
}
int isEmpty(struct Stack* stack) {
 return (stack->top == NULL);
}
void displayStack(struct Stack* stack) {
 if (stack->top == NULL) {
 printf("Stack is empty\n");
 return;
 }
struct Node* current = stack->top;
 while (current != NULL) {
 printf("%d ", current->data);
 current = current->next;
 }
 printf("\n");
}
int main() {
 struct Stack myStack;
 initializeStack(&myStack);
 push(&myStack, 10);
 push(&myStack, 20);
 push(&myStack, 30);
 printf("Stack: ");
 displayStack(&myStack);
 printf("Top Element: %d\n", peek(&myStack));
 printf("Popped Element: %d\n", pop(&myStack));
 printf("Stack after pop: ");
 displayStack(&myStack);
 printf("Is Stack Empty? %s\n", isEmpty(&myStack) ? "Yes" : "No");
 return 0;
}
OUTPUT 
Stack: 30 20 10 
Top Element: 30
Popped Element: 30
Stack after pop: 20 10 
Is Stack Empty? No
