#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
#define MAX_EDGES 1000
typedef struct {
int start, end, weight;
} Edge;
typedef struct {
 int *parent;
 int *rank;
} DisjointSet;
void initializeDisjointSet(DisjointSet *set, int size) {
 set->parent = (int *)malloc((size + 1) * sizeof(int));
 set->rank = (int *)calloc((size + 1), sizeof(int));
for (int i = 0; i <= size; i++) {
 set->parent[i] = i;
 }
}
int find(DisjointSet *set, int vertex) {
 if (set->parent[vertex] != vertex) {
 set->parent[vertex] = find(set, set->parent[vertex]);
 }
 return set->parent[vertex];
}
void unionSets(DisjointSet *set, int vertex1, int vertex2) {
 int root1 = find(set, vertex1);
 int root2 = find(set, vertex2);
if (root1 != root2) {

41
 if (set->rank[root1] > set->rank[root2]) {
 set->parent[root2] = root1;
 } else if (set->rank[root1] < set->rank[root2]) {
 set->parent[root1] = root2;
 } else {
 set->parent[root2] = root1;
 set->rank[root1]++;
 }}}
int compareEdges(const void *a, const void *b) {
 return ((Edge *)a)->weight - ((Edge *)b)->weight;}
void kruskalMST(Edge edges[], int numVertices, int numEdges) {
 DisjointSet set;
 initializeDisjointSet(&set, numVertices);
qsort(edges, numEdges, sizeof(Edge), compareEdges);
Edge mst[MAX_VERTICES - 1]; // Maximum edges in MST are numVertices - 1
int mstEdges = 0;
for (int i = 0; i < numEdges && mstEdges < numVertices - 1; i++) {
int startRoot = find(&set, edges[i].start);
int endRoot = find(&set, edges[i].end);
if (startRoot != endRoot) {
mst[mstEdges++] = edges[i];
unionSets(&set, startRoot, endRoot);
 }}
printf("Edges in Minimum Spanning Tree:\n");
for (int i = 0; i < mstEdges; i++) {
printf("Edge %d-%d Weight: %d\n", mst[i].start, mst[i].end, mst[i].weight);}
free(set.parent);
free(set.rank);
}
int main() {
int numVertices, numEdges;

printf("Enter the number of vertices: ");
scanf("%d", &numVertices);
printf("Enter the number of edges: ");
scanf("%d", &numEdges);
Edge edges[MAX_EDGES];
printf("Enter edge information (start vertex, end vertex, weight):\n");
for (int i = 0; i < numEdges; i++) {
scanf("%d %d %d", &edges[i].start, &edges[i].end, &edges[i].weight);
}
kruskalMST(edges, numVertices, numEdges);
return 0;
}
OUTPUT
Enter the number of vertices: 5
Enter the number of edges: 7
Enter edge information (start vertex, end vertex, weight):
0 1 2
0 2 4
1 2 1
1 3 3
2 3 5
2 4 7
3 4 6
Edges in Minimum Spanning Tree:
Edge 1-2 Weight: 1
Edge 0-1 Weight: 2
Edge 1-3 Weight: 3
Edge 3-4 Weight: 6
